sas2<-matrix(c((sigmaf2[1]),0,0,(sigmaf2[2])),2,2)
f2<-matrix(NA,regg2,1)
for(i in 1:regg2){
f2[i]<-(1+((1/nu)*((t(yf2[i,]-(((kronecker(t(matrixw2[i,]),diag(2)))%*%theta2))))%*%((solve(sas2)%*%(solve(matrix(c(1,roo2,roo2,1),2,2)))%*%(solve(sas2))))%*%(yf2[i,]-((kronecker(t(matrixw2[i,]),diag(2))%*%theta2))))))^(-(nu+2)/2)
}
return(sum(log(f2)))
}
rwtheta2<-function (logpost, proposal, start, m, y,z,roo2,sigmaf2,nu,d,q1)
{
pb = length(start)
Mpar = array(0, c(m, pb))
b = matrix(t(start))
lb = logpost(y,z,start,roo2,sigmaf2,nu,d,q1)
accept = 0
for (i in 1:m){
bc = b + t(rmvnorm(1,sigma=proposal$var))
lbc = logpost(y,z,(bc),roo2,sigmaf2,nu,d,q1)
prob = exp(lbc-lb)
{
if (runif(1) < prob){
lb = lbc
b = bc
accept = accept + 1
}
}
Mpar[i, ] = b
}
accept = accept/m
final = list(par = Mpar, accept = accept)
return(final)
}
postro2<-function(y,z,roo2,sigmaf2,theta2,nu,d,q1)
{
regg2<-regi(d,q1,y,z)$regg2
yf2<-regi(d,q1,y,z)$yf2
matrixw2<-regi(d,q1,y,z)$matrixw2
sas2<-matrix(c((sigmaf2[1]),0,0,(sigmaf2[2])),2,2)
f<-matrix(NA,regg2,1)
for(i in 1:regg2){
f[i]<-(1+((1/nu)*((t(yf2[i,]-(((kronecker(t(matrixw2[i,]),diag(2)))%*%theta2))))%*%((solve(sas2)%*%(solve(matrix(c(1,roo2,roo2,1),2,2)))%*%(solve(sas2))))%*%(yf2[i,]-((kronecker(t(matrixw2[i,]),diag(2))%*%theta2))))))^(-(nu+2)/2)
}
sig<-((-regg2)/2)*log(det((matrix(c(1,roo2,roo2,1),2,2))))
return(sum(log(f))+((sig)))
}
postro2<-function(y,z,roo2,sigmaf2,theta2,nu,d,q1)
{
regg2<-regi(d,q1,y,z)$regg2
yf2<-regi(d,q1,y,z)$yf2
matrixw2<-regi(d,q1,y,z)$matrixw2
sas2<-matrix(c((sigmaf2[1]),0,0,(sigmaf2[2])),2,2)
f<-matrix(NA,regg2,1)
for(i in 1:regg2){
f[i]<-(1+((1/nu)*((t(yf2[i,]-(((kronecker(t(matrixw2[i,]),diag(2)))%*%theta2))))%*%((solve(sas2)%*%(solve(matrix(c(1,roo2,roo2,1),2,2)))%*%(solve(sas2))))%*%(yf2[i,]-((kronecker(t(matrixw2[i,]),diag(2))%*%theta2))))))^(-(nu+2)/2)
}
sig<-((-regg2)/2)*log(det((matrix(c(1,roo2,roo2,1),2,2))))
return(sum(log(f))+((sig)))
}
rwro2<-function (logpost, proposal, start, m, y,z,sigmaf2,theta2,nu,d,q1)
{
pb = length(start)
Mpar = array(0, c(m, pb))
b = matrix(t(start))
lb = logpost(y,z,start,sigmaf2,theta2,nu,d,q1)
accept = 0
for (i in 1:m){
bc = b + (rnorm(1,sd=proposal$var))
lbc = logpost(y,z,(bc),sigmaf2,theta2,nu,d,q1)
prob = exp(lbc-lb)
if (is.na(prob) == FALSE){
if (runif(1) < prob){
lb = lbc
b = bc
accept = accept + 1
}
}
Mpar[i, ] = b
}
accept = accept/m
final = list(par = Mpar, accept = accept)
return(final)
}
proposalro2<-list(mean=0,var=0.1)
postsig2<-function(y,z,sigmaf2,roo2,theta2,nu,d,q1)
{
regg2<-regi(d,q1,y,z)$regg2
yf2<-regi(d,q1,y,z)$yf2
matrixw2<-regi(d,q1,y,z)$matrixw2
sas2<-matrix(c((sigmaf2[1]),0,0,(sigmaf2[2])),2,2)
f<-matrix(NA,regg2,1)
for(i in 1:regg2){
f[i]<-(1+((1/nu)*((t(yf2[i,]-(((kronecker(t(matrixw2[i,]),diag(2)))%*%theta2))))%*%((solve(sas2)%*%(solve(matrix(c(1,roo2,roo2,1),2,2)))%*%(solve(sas2))))%*%(yf2[i,]-((kronecker(t(matrixw2[i,]),diag(2))%*%theta2))))))^(-(nu+2)/2)
}
sig<-((-regg2)/2)*log(det(sas2%*%sas2))
return(sum(log(f))+((sig)))
}
rwsig2<-function (logpost, proposal, start, m, y,z,roo2,theta2,nu,d,q1)
{
pb = length(start)
Mpar = array(0, c(m, pb))
b = matrix(t(start))
lb = logpost(y,z,start,roo2,theta2,nu,d,q1)
accept = 0
for (i in 1:m){
bc = b + t(rtmvnorm(1, mean = proposal$mean, sigma = proposal$var, lower=rep(-Inf,2),upper=rep( Inf, length = 2)))
lbc = logpost(y,z,(bc),roo2,theta2,nu,d,q1)
prob = exp(lbc-lb)
if (is.na(prob) == FALSE){
if (runif(1) < prob){
lb = lbc
b = bc
accept = accept + 1
}
}
Mpar[i, ] = b
}
accept = accept/m
final = list(par = Mpar, accept = accept)
return(final)
}
postnu<-function(nu,y,z,theta,theta2,sigmaf,sigmaf2,roo,roo2,d,q1)
{
regg<-regi(d,q1,y,z)$regg
yf<-regi(d,q1,y,z)$yf
matrixw<-regi(d,q1,y,z)$matrixw
regg2<-regi(d,q1,y,z)$regg2
yf2<-regi(d,q1,y,z)$yf2
matrixw2<-regi(d,q1,y,z)$matrixw2
sas<-matrix(c((sigmaf[1]),0,0,(sigmaf[2])),2,2)
sas2<-matrix(c((sigmaf2[1]),0,0,(sigmaf2[2])),2,2)
f1<-matrix(NA,regg,1)
f2<-matrix(NA,regg2,1)
for(i in 1:regg){
f1[i]<-(1+((1/nu)*((t(yf[i,]-(((kronecker(t(matrixw[i,]),diag(2)))%*%theta))))%*%((solve(sas)%*%(solve(matrix(c(1,roo,roo,1),2,2)))%*%(solve(sas))))%*%(yf[i,]-((kronecker(t(matrixw[i,]),diag(2))%*%theta))))))^(-(nu+2)/2)
}
for(i in 1:regg2){
f2[i]<-(1+((1/nu)*((t(yf2[i,]-(((kronecker(t(matrixw2[i,]),diag(2)))%*%theta2))))%*%((solve(sas2)%*%(solve(matrix(c(1,roo2,roo2,1),2,2)))%*%(solve(sas2))))%*%(yf2[i,]-((kronecker(t(matrixw2[i,]),diag(2))%*%theta2))))))^(-(nu+2)/2)
}
nuu<-(T-2)*log(((gamma((nu+2)/2))/(gamma(nu/2)*nu)))
return((nuu)+sum(log(f1))+sum(log(f2)))
}
postnu(nu,thetat,thetat2,sigmaf,sigmaf2,roo,roo2,1,0.006)
nun<-seq(3,10,0.1)
nuj<-matrix(NA,length(nun),1)
for(i in 1:length(nun)){
nuj[i]<-postnu(nun[i],thetat,thetat2,sigmaf,sigmaf2,roo,roo2,matrixw,matrixw2,yf,yf2)
}
plot(nun,nuj)
rwnu<-function (logpost, proposal, start, y,z,m,theta, theta2, sigmaf,sigmaf2,roo,roo2,d,q1)
{
pb = length(start)
Mpar = array(0, c(m, pb))
b = matrix(t(start))
lb =  logpost(start,y,z,theta, theta2,sigmaf,sigmaf2,roo,roo2,d,q1)
accept = 0
for (i in 1:m){
bc = b + ((rnorm(1, mean = proposal$mean, sd = proposal$var)))
if (bc<=0|bc>330)
{bc=b
}
lbc = logpost((bc),y,z,theta,theta2,sigmaf,sigmaf2,roo,roo2,d,q1)
prob = exp(lbc-lb)
{
if (runif(1) < prob){
lb = lbc
b = bc
accept = accept + 1
}
}
Mpar[i, ] = b
}
accept = accept/m
final = list(par = Mpar, accept = accept)
return(final)
}
N<-10000
thetat2
dj=replicate(N,list(matrix(NA,1,1)))
rj<-replicate(N,list(matrix(NA,1,1)))
sj1=replicate(N,list(matrix(NA,2,1)))
roj1=replicate(N,list(matrix(NA,1,1)))
thetaj1=replicate(N,list(matrix(NA,1,10)))
sj2=replicate(N,list(matrix(NA,2,1)))
roj2=replicate(N,list(matrix(NA,1,1)))
thetaj2=replicate(N,list(matrix(NA,1,10)))
nuj<-replicate(N,list(matrix(NA,1,1)))
#============================================================#
#____________________________Valor inicial Gibbss____________#
#============================================================#
theta<-rep(0.05,10)
theta2<-rep(0.05,10)
sf1<-rep(0.01,0.5)
sf2<-rep(0.01,0.5)
thetaj1[[1]]<-theta
sj1[[1]]<-matrix(c(0.01,0.5),nrow=2,ncol=1)
roj1[[1]]<--0.05
thetaj2[[1]]<-theta2
sj2[[1]]<-matrix(c(0.01,0.5),nrow=2,ncol=1)
roj2[[1]]<--0.05
nuj[[1]]<-6
dj[[1]]<-0
rj[[1]]<-mean(z)
proposals1<-list(mean=c(0,0),var=0.000001*diag(2))
proposalr1<-list(mean=0,var=0.08)
proposalt1<-list(mean=rep(0,5,12),var=0.0001*laplacefit1$var)
proposals2<-list(mean=c(0,0),var=0.0000008*diag(2))
proposalr2<-list(mean=0,var=0.08)
proposalt2<-list(mean=rep(0.8,8),var=0.0001*laplacefit2$var)
proposalnu<-list(mean=0,var=8)
for(i in 2:N){
dj[[i]]=facum(y,z,as.numeric(thetaj1[[i-1]]),as.numeric(thetaj2[[i-1]]),roj1[[i-1]],roj2[[i-1]],sj1[[i-1]],sj2[[i-1]],nuj[[i-1]],rj[[i-1]],0,3,1)
rj[[i]]=rwreg(posregimend,rj[[i-1]],1,y,z,as.numeric(thetaj1[[i-1]]),as.numeric(thetaj2[[i-1]]),roj1[[i-1]],roj2[[i-1]],sj1[[i-1]],sj2[[i-1]],nuj[[i-1]],dj[[i]])$par
thetaj1[[i]]=rwtheta(postheta, proposalt1, as.numeric(thetaj1[[i-1]]), 1, y,z,roj1[[i-1]],sj1[[i-1]],nuj[[i-1]],dj[[i]],rj[[i]])$par
sj1[[i]]=t(rwsig(postsig,proposals1,sj1[[i-1]],1,y,z,roj1[[i-1]],as.numeric(thetaj1[[i]]),nuj[[i-1]],dj[[i]],rj[[i]])$par)
roj1[[i]]=t(rwro(postro,proposalr1,roj1[[i-1]],1,y,z,(sj1[[i]]),as.numeric(thetaj1[[i]]),nuj[[i-1]],dj[[i]],rj[[i]])$par)
thetaj2[[i]]=rwtheta2(postheta2, proposalt2, as.numeric(thetaj2[[i-1]]), 1, y,z,roj2[[i-1]],sj2[[i-1]],nuj[[i-1]],dj[[i]],rj[[i]])$par
sj2[[i]]=t(rwsig2(postsig2,proposals2,sj2[[i-1]],1,y,z,roj2[[i-1]],as.numeric(thetaj2[[i]]),nuj[[i-1]],dj[[i]],rj[[i]])$par)
roj2[[i]]=t(rwro2(postro2,proposalr2,roj2[[i-1]],1,y,z,(sj2[[i]]),as.numeric(thetaj2[[i]]),nuj[[i-1]],dj[[i]],rj[[i]])$par)
nuj[[i]]=t(rwnu(postnu,proposalnu,nuj[[i-1]],y,z,1,as.numeric(thetaj1[[i]]),as.numeric(thetaj2[[i]]),sj1[[i]],sj2[[i]],roj1[[i]],roj2[[i]],dj[[i]],rj[[i]])$par)
}
plot(y)
df<-matrix(NA,N,1)
for (i in 1:N){
df[i]=dj[[i]]
}
df<-df[apply(df, 1, Compose(is.finite, all)),]
plot((df))
table(df)
proposalt1<-list(mean=rep(0,5,12),var=0.0001*laplacefit1$var)
laplacefit1<-laplace(postlap1,rep(0.5,6),esti)
theta<-rep(0.01,10)
postlap1(theta)
postlap1(theta)$mode
?laplace
thetat
install.packages("FactoClass")
library(FactoClass)
data(admi)
Y<-admi[,c(8,11,9,10)]
Y
# Para tabla del texto , registros multiplos de 25
Z<-acm.disjonctif(Y); data.frame(Y,Z)[seq (0,nrow(Y),25),]
Z
B<-acm.burt(Y,Y); xtable(B,digits=rep(0,13))
B
g <- colSums(Z)/ nrow (Z)/4
xtable(data.frame (t(g)*100),digits=rep(1,13))
library(FactoClass)
data(admi)
Y<-admi[,c(8,11,9,10)]
# Para tabla del texto , registros multiplos de 25
Z<-acm.disjonctif(Y); data.frame(Y,Z)[seq (0,nrow(Y),25),]
xtable(data.frame(Y,Z)[seq(0,nrow(Y),25),],digits=rep(0,17))
B<-acm.burt(Y,Y); xtable(B,digits=rep(0,13))
g <- colSums(Z)/ nrow (Z)/4
xtable(data.frame (t(g)*100),digits=rep(1,13))
g
n<-nrow(Z); Dp<-diag(colSums(Z)); s<-ncol(Y);
X<-sqrt ( n / s ) * as . matrix ( Z ) %* %solve ( sqrt(Dp));
n<-nrow(Z); Dp<-diag(colSums(Z)); s<-ncol(Y);
X<-sqrt ( n / s ) * as . matrix ( Z ) %* %solve ( sqrt(Dp));
X<-sqrt ( n / s ) * as.matrix ( Z ) %*%solve( sqrt(Dp));
selin<-seq(25,445,25);
Dis<-dist(X[selin ,]); round(as.dist(Dis),1)
acm<-dudi.acm(Y,scannf=FALSE ,nf=3)
barplot(acm$eig ,cex.axis =0.6)
dev.print(device = xfig ,file="ACMadmiValP.fig")
acm<-dudi.acm(Y,scannf=FALSE ,nf=3)
barplot(acm$eig ,cex.axis =0.6)
dev.print(device = xfig ,file="ACMadmiValP.fig")
eiglst <-data.frame(vp=acm$eig ,porce=acm$eig*100/sum(acm$eig),
acupor=cumsum(acm$eig)*100/sum(acm$eig))
xtable(eiglst ,digits=c(1,3,1,1)) #tabla en formato LATEX
acm
acm$tab
?dudi.acm
acm$eig
plot(acm ,Tcol=FALSE ,roweti=as.character(selin),cframe=1,cex.row=0.6,
cex.global=0.8,gg=TRUE)
qf(0.95,1, 72)
qf(0.95,1, 72, lower.tail = F)
df(0.95,1, 72, lower.tail = F)
?qf
?qf
pf(0.95,1, 72, lower.tail = F)
pf(0.95,1, 72, lower.tail = T)
data(cork)
library(MNM)
install.packages("MNM")
library(MNM)
data(cork)
install.packages("ACSWR")
library(ACSWR)
data(cork)
cork_3v <- sweep(cork[,2:4], 1, cork[,1], "-")
colnames(cork_3v) <- c("E_N", "S_N", "W_N")
pairs(cork_3v, las = 1)
cork_2v <- with(cork,
data.frame(S_N = South - North, W_E = West - East))
plot(cork_2v, xlim = c(-30, 30), ylim = c(-30, 30),
las = 1, pty = "s")
est <- mv.1sample.est(cork_3v)
summary(est)
plotMvloc(est, X=cork_3v, color.ell=c(1,1,1))
signs_3v <- spatial.sign(cork_3v, FALSE, FALSE)
colMeans(signs_3v)
SCov(signs_3v, location = c(0, 0, 0))
mv.1sample.test(cork_3v, score = "s")
pairs(signs_3v, labels = colnames(cork_3v), las = 1)
cork
cork_3v
?sweep
?sweep
install.packages("npmv")
install.packages("stringr")
library(stringr)
#Simulamos un set de datos similar al que mencionas
datos<-data.frame(Education=rep(c("Below College","College","Bachelor","Master","Doctor"),each=9))
datos
#Este vector lo que nos indica a por que valor lo queremos cambiar
var_cat<-c("Below College"="1","Bachelor"="2","College"="3","Master"="4","Doctor"="5")
var_cat
#Utilizamos la función str_replace y lo guardamos en una nueva columna llamada Valores
datos["Valores"]<-str_replace_all(datos$Education,var_cat)
datos
?str_replace_all
library(readxl)
df <- read_xlsx("C:/Users/dfdop/Downloads/FINAL Comunicación e Identidad Organizacional en la Universidad (FINAL) (respuestas).xlsx")
df <- read_xlsx("C:/Users/dfdop/Downloads/FINAL Comunicación e Identidad Organizacional en la Universidad (FINAL) (respuestas).xlsx")
df
df[1]
colnames(df)
View(df)
df[3:44]
View(df)
colnames(df[44])
n_df <- df[3:44]
for(i in (1:ncol(n_df))){
print(i)
}
BVC <- read.csv("C:/Users/dfdop/Downloads/Datos históricos BVC.csv",encoding = "UTF-8")
View(BVC)
Grupo_Aval <- read.csv("C:/Users/dfdop/Downloads/Datos históricos GAA_p.csv",encoding = "UTF-8")
Davivienda_pf <- read.csv("C:/Users/dfdop/Downloads/Datos históricos DVI_p.csv",encoding = "UTF-8")
Banco_Bogota <- read.csv("C:/Users/dfdop/Downloads/Datos históricos BBO.csv",encoding = "UTF-8")
Bancolombia <- read.csv("C:/Users/dfdop/Downloads/Datos históricos BIC.csv",encoding = "UTF-8")
Bancolombia_pf <- read.csv("C:/Users/dfdop/Downloads/Datos históricos BIC_p1.csv",encoding = "UTF-8")
BVC <- read.csv("C:/Users/dfdop/Downloads/Datos históricos BVC.csv",encoding = "UTF-8")
Canacol_Energy <- read.csv("C:/Users/dfdop/Downloads/Datos históricos CNE.csv",encoding = "UTF-8")
Celsia <- read.csv("C:/Users/dfdop/Downloads/Datos históricos CEL.csv",encoding = "UTF-8")
Cemagros <- read.csv("C:/Users/dfdop/Downloads/Datos históricos CCB.csv",encoding = "UTF-8")
Cementos_Argos_pf <- read.csv("C:/Users/dfdop/Downloads/Datos históricos CCB_p.csv",encoding = "UTF-8")
Colombiana <- read.csv("C:/Users/dfdop/Downloads/Datos históricos CFV.csv",encoding = "UTF-8")
Corporacion_Financiera_Col <- read.csv("C:/Users/dfdop/Downloads/Datos históricos CFV_p.csv",encoding = "UTF-8")
Ecopetrol <- read.csv("C:/Users/dfdop/Downloads/Datos históricos ECO.csv",encoding = "UTF-8")
ETB <- read.csv("C:/Users/dfdop/Downloads/Datos históricos ETB.csv",encoding = "UTF-8")
Grupo_Argos <- read.csv("C:/Users/dfdop/Downloads/Datos históricos ARG.csv",encoding = "UTF-8")
Grupo_Argos_Pref <- read.csv("C:/Users/dfdop/Downloads/Datos históricos ARG_p.csv",encoding = "UTF-8")
Grupo_Bolivar <- read.csv("C:/Users/dfdop/Downloads/Datos históricos SCA.csv",encoding = "UTF-8")
Grupo_Inversiones_Suramericana <- read.csv("C:/Users/dfdop/Downloads/Datos históricos SIS_p.csv",encoding = "UTF-8")
Grupo_Energia_Bog <- read.csv("C:/Users/dfdop/Downloads/Datos históricos GEB.csv",encoding = "UTF-8")
Interaction_Electric <- read.csv("C:/Users/dfdop/Downloads/Datos históricos ISA.csv",encoding = "UTF-8")
Mineros_SA <- read.csv("C:/Users/dfdop/Downloads/Datos históricos MAS.csv",encoding = "UTF-8")
Nutresa <- read.csv("C:/Users/dfdop/Downloads/Datos históricos NCH.csv",encoding = "UTF-8")
Terpel <- read.csv("C:/Users/dfdop/Downloads/Datos históricos TPL.csv",encoding = "UTF-8")
Promigas <- read.csv("C:/Users/dfdop/Downloads/Datos históricos PMG.csv",encoding = "UTF-8")
Suramericana <- read.csv("C:/Users/dfdop/Downloads/Datos históricos SIS.csv",encoding = "UTF-8")
COLCAP <- data.frame(Grupo_Aval$Último,Davivienda_pf$Último,Banco_Bogota$Último,Bancolombia$Último,Bancolombia_pf$Último,
BVC$Último, Canacol_Energy$Último, Celsia$Último, Cemagros$Último, Cementos_Argos_pf$Último,
Colombiana$Último, Corporacion_Financiera_Col$Último, Ecopetrol$Último, ETB$Último,
Grupo_Argos$Último, Grupo_Argos_Pref$Último, Grupo_Bolivar$Último, Grupo_Inversiones_Suramericana$Último,
Grupo_Energia_Bog$Último, Interaction_Electric$Último, Mineros_SA$Último,Nutresa$Último,
Promigas$Último,Suramericana$Último)
colcap_n <- c("Fecha","GAA_p","DVI_p","BBO","BIC","BIC_p1","BVC","CNE","CEL","CCB","CCB_p","CFV","CFV_p","ECO","ETB",
"ARG","ARG_p","SCA","SIS_p","GEB","ISA","MAS","NCH","PMG","SIS")
colnames(COLCAP)<- colcap_n
COLCAP <- data.frame(Grupo_Aval$X.U.FEFF.Fecha,Grupo_Aval$Último,Davivienda_pf$Último,Banco_Bogota$Último,Bancolombia$Último,Bancolombia_pf$Último,
BVC$Último, Canacol_Energy$Último, Celsia$Último, Cemagros$Último, Cementos_Argos_pf$Último,
Colombiana$Último, Corporacion_Financiera_Col$Último, Ecopetrol$Último, ETB$Último,
Grupo_Argos$Último, Grupo_Argos_Pref$Último, Grupo_Bolivar$Último, Grupo_Inversiones_Suramericana$Último,
Grupo_Energia_Bog$Último, Interaction_Electric$Último, Mineros_SA$Último,Nutresa$Último,
Promigas$Último,Suramericana$Último)
colcap_n <- c("Fecha","GAA_p","DVI_p","BBO","BIC","BIC_p1","BVC","CNE","CEL","CCB","CCB_p","CFV","CFV_p","ECO","ETB",
"ARG","ARG_p","SCA","SIS_p","GEB","ISA","MAS","NCH","PMG","SIS")
colnames(COLCAP)<- colcap_n
COLCAP$Fecha<-as.Date(COLCAP$Fecha,format="%d.%m.%Y")
library(dplyr)
datos <- arrange(COLCAP, Fecha) # Orden directo
library(openxlsx)
write.xlsx(datos, "C:/Users/dfdop/Desktop/COLCAP/colcap2.xlsx")
library(readr)
library(readxl)
N_data <- read_excel("C:/Users/dfdop/Desktop/COLCAP/colcap2.xlsx")
N_data
Fron <- read_excel("C:/Users/dfdop/Desktop/COLCAP/colcap2.xlsx")
GraficoSeries <- as.timeSeries(Fron)
######====Portafolios optimos y fronteras eficientes Markowitz====####
library (timeDate)
library (timeSeries)
library (fBasics)
library (fAssets)
library (fPortfolio)
library (mnormt)
library (stats4)
library (sn)
library (corpcor)
library (slam)
library (Rglpk)
library (lubridate)
library (ggplot2)
library (xtable)
library (knitr)
library (psych)
library (markovchain)
rm(list=ls())
GraficoSeries <- as.timeSeries(Fron)
Fron <- read_excel("C:/Users/dfdop/Desktop/COLCAP/colcap2.xlsx")
GraficoSeries <- as.timeSeries(Fron)
plot(GraficoSeries[,1:8],main ="") # series1 documento
plot(GraficoSeries[,9:16],main ="") # series2 documento
plot(GraficoSeries[,17:21],main ="") # series3 documento
plot(GraficoSeries[,17:24],main ="") # series3 documento
?`as.timeSeries
?as.timeSeries
?readSeries
Fron<-readSeries("C:/Users/dfdop/Desktop/COLCAP/colcap2.xlsx",header = T,format =" %d-%m-%Y")
Fron<-readSeries("C:/Users/dfdop/Desktop/COLCAP/colcap2.xlsx",format =" %d-%m-%Y")
Fron$Fecha <- as.Date(Fron$Fecha,format="%d.%m.%Y")
GraficoSeries <- as.timeSeries(Fron)
plot(GraficoSeries[,1:8],main ="") # series1 documento
plot(GraficoSeries[,9:16],main ="") # series2 documento
plot(GraficoSeries[,1:8],main ="") # series1 documento
plot(GraficoSeries[,9:16],main ="") # series2 documento
plot(GraficoSeries[,17:24],main ="") # series3 documento
Rendimiento<-returns(Fron)
getwd()
setwd(setwd("C:/Users/dfdop/Desktop/New folder/MRCD_R_2"))
sapply(list("MRCD.R","optimalh.R", "MRCDreg.R"),source)
getwd()
rm(list = ls())  # cleanup
sapply(list("MRCD.R","optimalh.R", "MRCDreg.R"),source)
setwd("C:/Users/dfdop/Desktop/New folder/MRCD_R_2")
sapply(list("MRCD.R","optimalh.R", "MRCDreg.R"),source)
murderdata = read.table("demoUSA.txt",header=TRUE)
statenames = murderdata[,1] # first column has the names of the states
statenames
murderdata = murderdata[,-1]
murderdata
rownames(murderdata) = statenames
rownames(murderdata)
y = matrix(murderdata[,"M"],ncol=1) # murder rate is the dependent variable
y
xnames = setdiff(colnames(murderdata),"M")
X = data.matrix( murderdata[,xnames])
mX = cbind(y,X) # MRD regression is done on the joint data y+X, as explained in Rousseeuw et al. (2004)
mX
start.time <- Sys.time()
seth=seq(ceiling(dim(mX)[1]/2),dim(mX)[1],1)
hresult= optimalh(mX=t(mX), seth=seth)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
plot(seth,hresult$obj, xlab="subset size h", ylab="MRCD objective function",xaxt="n")
axis(1, at = seth, las=2)
msecov=c()
for (i in 1:(length(seth)-1)){
msecov[i]=mean((hresult$ccc[[i+1]]-hresult$ccc[[i]])^2)
}
plot(seth[-1],msecov, xlab="subset size h", ylab="Frobenius distance between K(h) and K(h-1)", xaxt="n")
axis(1, at = seth[-1], las=2)
# MRCD regression
mrcd = MRCDreg(y=y,X=X,alpha=44/50)
mrcd
mrcd$coef
X
dim(X)
y
# OLS regression
OLSbeta = lm(y ~X)$coef[-1]
OLSbeta
statenames
murderdata
mrcd
# OLS regression
OLSbeta = lm(y ~X)$coef[-1]
OLSbeta
data = read.csv( paste( getwd(),"/octane.csv",sep=""),header=F)
octane = data[,2:dim(data)[2]]
View(data)
octane
dim(data)
dim(octane)
mX=t(octane)
mX
murderdata = read.table("demoUSA.txt",header=TRUE)
statenames = murderdata[,1] # first column has the names of the states
murderdata = murderdata[,-1]
rownames(murderdata) = statenames
y = matrix(murderdata[,"M"],ncol=1) # murder rate is the dependent variable
xnames = setdiff(colnames(murderdata),"M")
X = data.matrix( murderdata[,xnames])
mX = cbind(y,X) # MRD regression is done on the joint data y+X, as explained in Rousseeuw et al. (2004)
start.time <- Sys.time()
mX
mX = t(mX)
dim(mX)
hopt = 44
result = mrcd(mX=mX,h=hopt)
library('rrcov') #for PcaHubert
sapply(list("MRCD.R","optimalh.R"),source)
library('rrcov') #for PcaHubert
result = mrcd(mX=mX,h=hopt)
result$rho
